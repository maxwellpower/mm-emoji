#!/usr/bin/env bash

# Mattermost Slack Emoji Transfer Tool

# Copyright (c) 2023 Maxwell Power
#
# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without
# restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom
# the Software is furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
# AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
# ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

# resize all image formats that are larger than 1024X1024
function _resizeEmoji() {
  for file in *.{gif,jpg,jpeg,png}; do
    if [ -f "$file" ]; then
      width=$(identify -format "%w" "${file}[0]")
      height=$(identify -format "%h" "${file}[0]")

      if [ "$width" -gt 1024 ] || [ "$height" -gt 1024 ]; then
        echo "Resizing $file ..."
        convert "$file" -resize 1024x1024 "$file"
      else
        echo "$file is not larger than 1024x1024, skipping..."
      fi
    fi
  done
}

function _optimizeJPEG() {
  for file in *.{jpg,jpeg}; do
    if [ -f "$file" ]; then
      echo "Optimizing JPEG $file ..."
      jpegoptim --max=85 "$file"
      while [ $(stat -c%s "$file") -gt 524288 ]; do
        echo "Further optimizing JPEG $file ..."
        jpegoptim --max=$(( $(jpegoptim --max=85 "$file" | grep -oP '(?<=\()[0-9]+(?=%)') - 10 )) "$file"
      done
    fi
  done
}

function _optimizePNG() {
  for file in *.png; do
    if [ -f "$file" ]; then
      echo "Optimizing PNG $file ..."
      pngquant --force --ext .png "$file"
      while [ $(stat -c%s "$file") -gt 524288 ]; do
        echo "Further optimizing PNG $file ..."
        mogrify -path . -filter Triangle -define filter:support=2 -thumbnail 75% -unsharp 0.25x0.25+8+0.065 -dither None -posterize 136 -quality 82 -define jpeg:fancy-upsampling=off -define png:compression-filter=5 -define png:compression-level=9 -define png:compression-strategy=1 -define png:exclude-chunk=all -interlace none -colorspace sRGB "$file"
      done
    fi
  done
}

function _optimizeGIF() {
  for file in *.gif; do
    if [ -f "$file" ]; then
      echo "Optimizing GIF $file ..."
      gifsicle --batch --optimize=3 "$file"
      while [ $(stat -c%s "$file") -gt 524288 ]; do
        echo "Further optimizing GIF $file ..."
        gifsicle --batch --optimize=3 --colors 256 --scale 0.75 "$file"
      done
    fi
  done
}

# Function to move oversized images to a failed folder and log the action
function _moveOversizedImages() {
  for file in *.{gif,jpg,jpeg,png}; do
    if [ -f "$file" ]; then
      width=$(identify -format "%w" "${file}[0]")
      height=$(identify -format "%h" "${file}[0]")
      if [ "$width" -gt 1024 ] || [ "$height" -gt 1024 ]; then
        echo "Moving oversized image $file to failed folder"
        mkdir -p failed
        echo "$file" >> resize_failed.log
        mv "$file" failed/
      fi
    fi
  done
}

_resizeEmoji
_optimizeJPEG
_optimizePNG
_optimizeGIF
_moveOversizedImages
